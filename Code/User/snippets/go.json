{
/*
	 // Place your snippets for Go here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	 // same ids are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Add Test function": {
		"prefix": "testfunc",
		"body": [
			"func Test${1:name}(t *testing.T) {",
			"	$0",
			"}"
		],
		"description": "Add a test function"
	},

	"Add t.Run":{
		"prefix": "trun",
		"body": [
			"t.Run(\"${1:name}\", func(t *testing.T) {",
			"	$0",
			"})"
		],
		"description": "Add subtest run"
	},
    
	"http Handler Function": {
		"prefix": "handlerfunc",
		"body": [
			"func ${1:name}(w http.ResponseWriter, r *http.Request) {",
			"	$0",
			"}"
		],
		"description": "http handler function"
	},
    
	"Render Error" : {
		"prefix": "rendererr",
		"body": [
			"c.RenderErr(w, r, cntlErr{",
			"	InternalErrMsg: []string{${1:internalError}},",
			"	ShowMsg: \"${2:externalError}\",",
			"	HTTPStatus: http.${3:httpStatus},",
			"})"
		],
		"description": "Render Error function"
	},
    
	"Formated string":{
		"prefix": "fmtstr",
		"body": "fmt.Sprintf(${1:pattern}, ${2:args})",
		"description": "formated string"
	}
}